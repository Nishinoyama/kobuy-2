// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nishinoyama/kobuy-2/ent/grocery"
	"github.com/nishinoyama/kobuy-2/ent/predicate"
	"github.com/nishinoyama/kobuy-2/ent/purchase"
	"github.com/nishinoyama/kobuy-2/ent/user"
)

// GroceryUpdate is the builder for updating Grocery entities.
type GroceryUpdate struct {
	config
	hooks    []Hook
	mutation *GroceryMutation
}

// Where appends a list predicates to the GroceryUpdate builder.
func (gu *GroceryUpdate) Where(ps ...predicate.Grocery) *GroceryUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "name" field.
func (gu *GroceryUpdate) SetName(s string) *GroceryUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetPrice sets the "price" field.
func (gu *GroceryUpdate) SetPrice(i int) *GroceryUpdate {
	gu.mutation.ResetPrice()
	gu.mutation.SetPrice(i)
	return gu
}

// AddPrice adds i to the "price" field.
func (gu *GroceryUpdate) AddPrice(i int) *GroceryUpdate {
	gu.mutation.AddPrice(i)
	return gu
}

// SetUnit sets the "unit" field.
func (gu *GroceryUpdate) SetUnit(i int) *GroceryUpdate {
	gu.mutation.ResetUnit()
	gu.mutation.SetUnit(i)
	return gu
}

// AddUnit adds i to the "unit" field.
func (gu *GroceryUpdate) AddUnit(i int) *GroceryUpdate {
	gu.mutation.AddUnit(i)
	return gu
}

// SetExpirationDate sets the "expiration_date" field.
func (gu *GroceryUpdate) SetExpirationDate(t time.Time) *GroceryUpdate {
	gu.mutation.SetExpirationDate(t)
	return gu
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (gu *GroceryUpdate) SetNillableExpirationDate(t *time.Time) *GroceryUpdate {
	if t != nil {
		gu.SetExpirationDate(*t)
	}
	return gu
}

// SetProviderID sets the "provider" edge to the User entity by ID.
func (gu *GroceryUpdate) SetProviderID(id int) *GroceryUpdate {
	gu.mutation.SetProviderID(id)
	return gu
}

// SetNillableProviderID sets the "provider" edge to the User entity by ID if the given value is not nil.
func (gu *GroceryUpdate) SetNillableProviderID(id *int) *GroceryUpdate {
	if id != nil {
		gu = gu.SetProviderID(*id)
	}
	return gu
}

// SetProvider sets the "provider" edge to the User entity.
func (gu *GroceryUpdate) SetProvider(u *User) *GroceryUpdate {
	return gu.SetProviderID(u.ID)
}

// AddPurchasedIDs adds the "purchased" edge to the Purchase entity by IDs.
func (gu *GroceryUpdate) AddPurchasedIDs(ids ...int) *GroceryUpdate {
	gu.mutation.AddPurchasedIDs(ids...)
	return gu
}

// AddPurchased adds the "purchased" edges to the Purchase entity.
func (gu *GroceryUpdate) AddPurchased(p ...*Purchase) *GroceryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddPurchasedIDs(ids...)
}

// Mutation returns the GroceryMutation object of the builder.
func (gu *GroceryUpdate) Mutation() *GroceryMutation {
	return gu.mutation
}

// ClearProvider clears the "provider" edge to the User entity.
func (gu *GroceryUpdate) ClearProvider() *GroceryUpdate {
	gu.mutation.ClearProvider()
	return gu
}

// ClearPurchased clears all "purchased" edges to the Purchase entity.
func (gu *GroceryUpdate) ClearPurchased() *GroceryUpdate {
	gu.mutation.ClearPurchased()
	return gu
}

// RemovePurchasedIDs removes the "purchased" edge to Purchase entities by IDs.
func (gu *GroceryUpdate) RemovePurchasedIDs(ids ...int) *GroceryUpdate {
	gu.mutation.RemovePurchasedIDs(ids...)
	return gu
}

// RemovePurchased removes "purchased" edges to Purchase entities.
func (gu *GroceryUpdate) RemovePurchased(p ...*Purchase) *GroceryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemovePurchasedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroceryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GroceryMutation](ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroceryUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroceryUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroceryUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroceryUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := grocery.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Grocery.name": %w`, err)}
		}
	}
	if v, ok := gu.mutation.Price(); ok {
		if err := grocery.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Grocery.price": %w`, err)}
		}
	}
	if v, ok := gu.mutation.Unit(); ok {
		if err := grocery.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Grocery.unit": %w`, err)}
		}
	}
	return nil
}

func (gu *GroceryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(grocery.Table, grocery.Columns, sqlgraph.NewFieldSpec(grocery.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(grocery.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Price(); ok {
		_spec.SetField(grocery.FieldPrice, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedPrice(); ok {
		_spec.AddField(grocery.FieldPrice, field.TypeInt, value)
	}
	if value, ok := gu.mutation.Unit(); ok {
		_spec.SetField(grocery.FieldUnit, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedUnit(); ok {
		_spec.AddField(grocery.FieldUnit, field.TypeInt, value)
	}
	if value, ok := gu.mutation.ExpirationDate(); ok {
		_spec.SetField(grocery.FieldExpirationDate, field.TypeTime, value)
	}
	if gu.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grocery.ProviderTable,
			Columns: []string{grocery.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grocery.ProviderTable,
			Columns: []string{grocery.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.PurchasedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grocery.PurchasedTable,
			Columns: []string{grocery.PurchasedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedPurchasedIDs(); len(nodes) > 0 && !gu.mutation.PurchasedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grocery.PurchasedTable,
			Columns: []string{grocery.PurchasedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.PurchasedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grocery.PurchasedTable,
			Columns: []string{grocery.PurchasedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grocery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroceryUpdateOne is the builder for updating a single Grocery entity.
type GroceryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroceryMutation
}

// SetName sets the "name" field.
func (guo *GroceryUpdateOne) SetName(s string) *GroceryUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetPrice sets the "price" field.
func (guo *GroceryUpdateOne) SetPrice(i int) *GroceryUpdateOne {
	guo.mutation.ResetPrice()
	guo.mutation.SetPrice(i)
	return guo
}

// AddPrice adds i to the "price" field.
func (guo *GroceryUpdateOne) AddPrice(i int) *GroceryUpdateOne {
	guo.mutation.AddPrice(i)
	return guo
}

// SetUnit sets the "unit" field.
func (guo *GroceryUpdateOne) SetUnit(i int) *GroceryUpdateOne {
	guo.mutation.ResetUnit()
	guo.mutation.SetUnit(i)
	return guo
}

// AddUnit adds i to the "unit" field.
func (guo *GroceryUpdateOne) AddUnit(i int) *GroceryUpdateOne {
	guo.mutation.AddUnit(i)
	return guo
}

// SetExpirationDate sets the "expiration_date" field.
func (guo *GroceryUpdateOne) SetExpirationDate(t time.Time) *GroceryUpdateOne {
	guo.mutation.SetExpirationDate(t)
	return guo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (guo *GroceryUpdateOne) SetNillableExpirationDate(t *time.Time) *GroceryUpdateOne {
	if t != nil {
		guo.SetExpirationDate(*t)
	}
	return guo
}

// SetProviderID sets the "provider" edge to the User entity by ID.
func (guo *GroceryUpdateOne) SetProviderID(id int) *GroceryUpdateOne {
	guo.mutation.SetProviderID(id)
	return guo
}

// SetNillableProviderID sets the "provider" edge to the User entity by ID if the given value is not nil.
func (guo *GroceryUpdateOne) SetNillableProviderID(id *int) *GroceryUpdateOne {
	if id != nil {
		guo = guo.SetProviderID(*id)
	}
	return guo
}

// SetProvider sets the "provider" edge to the User entity.
func (guo *GroceryUpdateOne) SetProvider(u *User) *GroceryUpdateOne {
	return guo.SetProviderID(u.ID)
}

// AddPurchasedIDs adds the "purchased" edge to the Purchase entity by IDs.
func (guo *GroceryUpdateOne) AddPurchasedIDs(ids ...int) *GroceryUpdateOne {
	guo.mutation.AddPurchasedIDs(ids...)
	return guo
}

// AddPurchased adds the "purchased" edges to the Purchase entity.
func (guo *GroceryUpdateOne) AddPurchased(p ...*Purchase) *GroceryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddPurchasedIDs(ids...)
}

// Mutation returns the GroceryMutation object of the builder.
func (guo *GroceryUpdateOne) Mutation() *GroceryMutation {
	return guo.mutation
}

// ClearProvider clears the "provider" edge to the User entity.
func (guo *GroceryUpdateOne) ClearProvider() *GroceryUpdateOne {
	guo.mutation.ClearProvider()
	return guo
}

// ClearPurchased clears all "purchased" edges to the Purchase entity.
func (guo *GroceryUpdateOne) ClearPurchased() *GroceryUpdateOne {
	guo.mutation.ClearPurchased()
	return guo
}

// RemovePurchasedIDs removes the "purchased" edge to Purchase entities by IDs.
func (guo *GroceryUpdateOne) RemovePurchasedIDs(ids ...int) *GroceryUpdateOne {
	guo.mutation.RemovePurchasedIDs(ids...)
	return guo
}

// RemovePurchased removes "purchased" edges to Purchase entities.
func (guo *GroceryUpdateOne) RemovePurchased(p ...*Purchase) *GroceryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemovePurchasedIDs(ids...)
}

// Where appends a list predicates to the GroceryUpdate builder.
func (guo *GroceryUpdateOne) Where(ps ...predicate.Grocery) *GroceryUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroceryUpdateOne) Select(field string, fields ...string) *GroceryUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Grocery entity.
func (guo *GroceryUpdateOne) Save(ctx context.Context) (*Grocery, error) {
	return withHooks[*Grocery, GroceryMutation](ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroceryUpdateOne) SaveX(ctx context.Context) *Grocery {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroceryUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroceryUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroceryUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := grocery.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Grocery.name": %w`, err)}
		}
	}
	if v, ok := guo.mutation.Price(); ok {
		if err := grocery.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Grocery.price": %w`, err)}
		}
	}
	if v, ok := guo.mutation.Unit(); ok {
		if err := grocery.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Grocery.unit": %w`, err)}
		}
	}
	return nil
}

func (guo *GroceryUpdateOne) sqlSave(ctx context.Context) (_node *Grocery, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grocery.Table, grocery.Columns, sqlgraph.NewFieldSpec(grocery.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Grocery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grocery.FieldID)
		for _, f := range fields {
			if !grocery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grocery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(grocery.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Price(); ok {
		_spec.SetField(grocery.FieldPrice, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedPrice(); ok {
		_spec.AddField(grocery.FieldPrice, field.TypeInt, value)
	}
	if value, ok := guo.mutation.Unit(); ok {
		_spec.SetField(grocery.FieldUnit, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedUnit(); ok {
		_spec.AddField(grocery.FieldUnit, field.TypeInt, value)
	}
	if value, ok := guo.mutation.ExpirationDate(); ok {
		_spec.SetField(grocery.FieldExpirationDate, field.TypeTime, value)
	}
	if guo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grocery.ProviderTable,
			Columns: []string{grocery.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grocery.ProviderTable,
			Columns: []string{grocery.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.PurchasedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grocery.PurchasedTable,
			Columns: []string{grocery.PurchasedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedPurchasedIDs(); len(nodes) > 0 && !guo.mutation.PurchasedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grocery.PurchasedTable,
			Columns: []string{grocery.PurchasedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.PurchasedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grocery.PurchasedTable,
			Columns: []string{grocery.PurchasedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Grocery{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grocery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
