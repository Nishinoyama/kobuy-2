// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nishinoyama/kobuy-2/ent/balancelog"
	"github.com/nishinoyama/kobuy-2/ent/user"
)

// BalanceLogCreate is the builder for creating a BalanceLog entity.
type BalanceLogCreate struct {
	config
	mutation *BalanceLogMutation
	hooks    []Hook
}

// SetPrice sets the "price" field.
func (blc *BalanceLogCreate) SetPrice(i int) *BalanceLogCreate {
	blc.mutation.SetPrice(i)
	return blc
}

// SetType sets the "type" field.
func (blc *BalanceLogCreate) SetType(b balancelog.Type) *BalanceLogCreate {
	blc.mutation.SetType(b)
	return blc
}

// SetDonorID sets the "donor" edge to the User entity by ID.
func (blc *BalanceLogCreate) SetDonorID(id int) *BalanceLogCreate {
	blc.mutation.SetDonorID(id)
	return blc
}

// SetNillableDonorID sets the "donor" edge to the User entity by ID if the given value is not nil.
func (blc *BalanceLogCreate) SetNillableDonorID(id *int) *BalanceLogCreate {
	if id != nil {
		blc = blc.SetDonorID(*id)
	}
	return blc
}

// SetDonor sets the "donor" edge to the User entity.
func (blc *BalanceLogCreate) SetDonor(u *User) *BalanceLogCreate {
	return blc.SetDonorID(u.ID)
}

// SetReceiverID sets the "receiver" edge to the User entity by ID.
func (blc *BalanceLogCreate) SetReceiverID(id int) *BalanceLogCreate {
	blc.mutation.SetReceiverID(id)
	return blc
}

// SetNillableReceiverID sets the "receiver" edge to the User entity by ID if the given value is not nil.
func (blc *BalanceLogCreate) SetNillableReceiverID(id *int) *BalanceLogCreate {
	if id != nil {
		blc = blc.SetReceiverID(*id)
	}
	return blc
}

// SetReceiver sets the "receiver" edge to the User entity.
func (blc *BalanceLogCreate) SetReceiver(u *User) *BalanceLogCreate {
	return blc.SetReceiverID(u.ID)
}

// Mutation returns the BalanceLogMutation object of the builder.
func (blc *BalanceLogCreate) Mutation() *BalanceLogMutation {
	return blc.mutation
}

// Save creates the BalanceLog in the database.
func (blc *BalanceLogCreate) Save(ctx context.Context) (*BalanceLog, error) {
	return withHooks[*BalanceLog, BalanceLogMutation](ctx, blc.sqlSave, blc.mutation, blc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (blc *BalanceLogCreate) SaveX(ctx context.Context) *BalanceLog {
	v, err := blc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blc *BalanceLogCreate) Exec(ctx context.Context) error {
	_, err := blc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blc *BalanceLogCreate) ExecX(ctx context.Context) {
	if err := blc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blc *BalanceLogCreate) check() error {
	if _, ok := blc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "BalanceLog.price"`)}
	}
	if _, ok := blc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "BalanceLog.type"`)}
	}
	if v, ok := blc.mutation.GetType(); ok {
		if err := balancelog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "BalanceLog.type": %w`, err)}
		}
	}
	return nil
}

func (blc *BalanceLogCreate) sqlSave(ctx context.Context) (*BalanceLog, error) {
	if err := blc.check(); err != nil {
		return nil, err
	}
	_node, _spec := blc.createSpec()
	if err := sqlgraph.CreateNode(ctx, blc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	blc.mutation.id = &_node.ID
	blc.mutation.done = true
	return _node, nil
}

func (blc *BalanceLogCreate) createSpec() (*BalanceLog, *sqlgraph.CreateSpec) {
	var (
		_node = &BalanceLog{config: blc.config}
		_spec = sqlgraph.NewCreateSpec(balancelog.Table, sqlgraph.NewFieldSpec(balancelog.FieldID, field.TypeInt))
	)
	if value, ok := blc.mutation.Price(); ok {
		_spec.SetField(balancelog.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := blc.mutation.GetType(); ok {
		_spec.SetField(balancelog.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := blc.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   balancelog.DonorTable,
			Columns: []string{balancelog.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_donor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := blc.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   balancelog.ReceiverTable,
			Columns: []string{balancelog.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_receiver = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BalanceLogCreateBulk is the builder for creating many BalanceLog entities in bulk.
type BalanceLogCreateBulk struct {
	config
	builders []*BalanceLogCreate
}

// Save creates the BalanceLog entities in the database.
func (blcb *BalanceLogCreateBulk) Save(ctx context.Context) ([]*BalanceLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(blcb.builders))
	nodes := make([]*BalanceLog, len(blcb.builders))
	mutators := make([]Mutator, len(blcb.builders))
	for i := range blcb.builders {
		func(i int, root context.Context) {
			builder := blcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BalanceLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, blcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, blcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, blcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (blcb *BalanceLogCreateBulk) SaveX(ctx context.Context) []*BalanceLog {
	v, err := blcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blcb *BalanceLogCreateBulk) Exec(ctx context.Context) error {
	_, err := blcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blcb *BalanceLogCreateBulk) ExecX(ctx context.Context) {
	if err := blcb.Exec(ctx); err != nil {
		panic(err)
	}
}
