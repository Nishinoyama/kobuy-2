// Code generated by ent, DO NOT EDIT.

package balancelog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nishinoyama/kobuy-2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldLTE(FieldID, id))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldEQ(FieldPrice, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldLTE(FieldPrice, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.BalanceLog {
	return predicate.BalanceLog(sql.FieldNotIn(FieldType, vs...))
}

// HasDonor applies the HasEdge predicate on the "donor" edge.
func HasDonor() predicate.BalanceLog {
	return predicate.BalanceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DonorTable, DonorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDonorWith applies the HasEdge predicate on the "donor" edge with a given conditions (other predicates).
func HasDonorWith(preds ...predicate.User) predicate.BalanceLog {
	return predicate.BalanceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DonorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DonorTable, DonorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceiver applies the HasEdge predicate on the "receiver" edge.
func HasReceiver() predicate.BalanceLog {
	return predicate.BalanceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReceiverTable, ReceiverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiverWith applies the HasEdge predicate on the "receiver" edge with a given conditions (other predicates).
func HasReceiverWith(preds ...predicate.User) predicate.BalanceLog {
	return predicate.BalanceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceiverInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReceiverTable, ReceiverColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BalanceLog) predicate.BalanceLog {
	return predicate.BalanceLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BalanceLog) predicate.BalanceLog {
	return predicate.BalanceLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BalanceLog) predicate.BalanceLog {
	return predicate.BalanceLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
