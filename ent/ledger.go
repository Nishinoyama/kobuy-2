// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/nishinoyama/kobuy-2/ent/ledger"
	"github.com/nishinoyama/kobuy-2/ent/user"
)

// Ledger is the model entity for the Ledger schema.
type Ledger struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Type holds the value of the "type" field.
	Type ledger.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LedgerQuery when eager-loading is set.
	Edges         LedgerEdges `json:"edges"`
	user_donor    *int
	user_receiver *int
}

// LedgerEdges holds the relations/edges for other nodes in the graph.
type LedgerEdges struct {
	// Donor holds the value of the donor edge.
	Donor *User `json:"donor,omitempty"`
	// Receiver holds the value of the receiver edge.
	Receiver *User `json:"receiver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DonorOrErr returns the Donor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LedgerEdges) DonorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Donor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Donor, nil
	}
	return nil, &NotLoadedError{edge: "donor"}
}

// ReceiverOrErr returns the Receiver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LedgerEdges) ReceiverOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Receiver == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Receiver, nil
	}
	return nil, &NotLoadedError{edge: "receiver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ledger) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ledger.FieldID, ledger.FieldPrice:
			values[i] = new(sql.NullInt64)
		case ledger.FieldType:
			values[i] = new(sql.NullString)
		case ledger.ForeignKeys[0]: // user_donor
			values[i] = new(sql.NullInt64)
		case ledger.ForeignKeys[1]: // user_receiver
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ledger", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ledger fields.
func (l *Ledger) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ledger.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case ledger.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				l.Price = int(value.Int64)
			}
		case ledger.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				l.Type = ledger.Type(value.String)
			}
		case ledger.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_donor", value)
			} else if value.Valid {
				l.user_donor = new(int)
				*l.user_donor = int(value.Int64)
			}
		case ledger.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_receiver", value)
			} else if value.Valid {
				l.user_receiver = new(int)
				*l.user_receiver = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDonor queries the "donor" edge of the Ledger entity.
func (l *Ledger) QueryDonor() *UserQuery {
	return NewLedgerClient(l.config).QueryDonor(l)
}

// QueryReceiver queries the "receiver" edge of the Ledger entity.
func (l *Ledger) QueryReceiver() *UserQuery {
	return NewLedgerClient(l.config).QueryReceiver(l)
}

// Update returns a builder for updating this Ledger.
// Note that you need to call Ledger.Unwrap() before calling this method if this Ledger
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Ledger) Update() *LedgerUpdateOne {
	return NewLedgerClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Ledger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Ledger) Unwrap() *Ledger {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ledger is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Ledger) String() string {
	var builder strings.Builder
	builder.WriteString("Ledger(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", l.Price))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", l.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Ledgers is a parsable slice of Ledger.
type Ledgers []*Ledger
