// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nishinoyama/kobuy-2/ent/grocery"
	"github.com/nishinoyama/kobuy-2/ent/user"
)

// GroceryCreate is the builder for creating a Grocery entity.
type GroceryCreate struct {
	config
	mutation *GroceryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (gc *GroceryCreate) SetName(s string) *GroceryCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetProviderID sets the "provider" edge to the User entity by ID.
func (gc *GroceryCreate) SetProviderID(id int) *GroceryCreate {
	gc.mutation.SetProviderID(id)
	return gc
}

// SetNillableProviderID sets the "provider" edge to the User entity by ID if the given value is not nil.
func (gc *GroceryCreate) SetNillableProviderID(id *int) *GroceryCreate {
	if id != nil {
		gc = gc.SetProviderID(*id)
	}
	return gc
}

// SetProvider sets the "provider" edge to the User entity.
func (gc *GroceryCreate) SetProvider(u *User) *GroceryCreate {
	return gc.SetProviderID(u.ID)
}

// Mutation returns the GroceryMutation object of the builder.
func (gc *GroceryCreate) Mutation() *GroceryMutation {
	return gc.mutation
}

// Save creates the Grocery in the database.
func (gc *GroceryCreate) Save(ctx context.Context) (*Grocery, error) {
	return withHooks[*Grocery, GroceryMutation](ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroceryCreate) SaveX(ctx context.Context) *Grocery {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroceryCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroceryCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroceryCreate) check() error {
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Grocery.name"`)}
	}
	return nil
}

func (gc *GroceryCreate) sqlSave(ctx context.Context) (*Grocery, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GroceryCreate) createSpec() (*Grocery, *sqlgraph.CreateSpec) {
	var (
		_node = &Grocery{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(grocery.Table, sqlgraph.NewFieldSpec(grocery.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(grocery.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := gc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grocery.ProviderTable,
			Columns: []string{grocery.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_provided_groceries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroceryCreateBulk is the builder for creating many Grocery entities in bulk.
type GroceryCreateBulk struct {
	config
	builders []*GroceryCreate
}

// Save creates the Grocery entities in the database.
func (gcb *GroceryCreateBulk) Save(ctx context.Context) ([]*Grocery, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Grocery, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroceryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroceryCreateBulk) SaveX(ctx context.Context) []*Grocery {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroceryCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroceryCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
