// Code generated by ent, DO NOT EDIT.

package grocery

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grocery type in the database.
	Label = "grocery"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldExpirationDate holds the string denoting the expiration_date field in the database.
	FieldExpirationDate = "expiration_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgePurchased holds the string denoting the purchased edge name in mutations.
	EdgePurchased = "purchased"
	// Table holds the table name of the grocery in the database.
	Table = "groceries"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "groceries"
	// ProviderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ProviderInverseTable = "users"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "user_provided_groceries"
	// PurchasedTable is the table that holds the purchased relation/edge.
	PurchasedTable = "purchases"
	// PurchasedInverseTable is the table name for the Purchase entity.
	// It exists in this package in order to avoid circular dependency with the "purchase" package.
	PurchasedInverseTable = "purchases"
	// PurchasedColumn is the table column denoting the purchased relation/edge.
	PurchasedColumn = "grocery_purchased"
)

// Columns holds all SQL columns for grocery fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
	FieldUnit,
	FieldExpirationDate,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "groceries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_provided_groceries",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(int) error
	// UnitValidator is a validator for the "unit" field. It is called by the builders before save.
	UnitValidator func(int) error
	// DefaultExpirationDate holds the default value on creation for the "expiration_date" field.
	DefaultExpirationDate time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Grocery queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByExpirationDate orders the results by the expiration_date field.
func ByExpirationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByPurchasedCount orders the results by purchased count.
func ByPurchasedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPurchasedStep(), opts...)
	}
}

// ByPurchased orders the results by purchased terms.
func ByPurchased(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPurchasedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
	)
}
func newPurchasedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PurchasedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PurchasedTable, PurchasedColumn),
	)
}
