// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nishinoyama/kobuy-2/pkg/ent/grocery"
	"github.com/nishinoyama/kobuy-2/pkg/ent/purchase"
	"github.com/nishinoyama/kobuy-2/pkg/ent/user"
)

// PurchaseCreate is the builder for creating a Purchase entity.
type PurchaseCreate struct {
	config
	mutation *PurchaseMutation
	hooks    []Hook
}

// SetPrice sets the "price" field.
func (pc *PurchaseCreate) SetPrice(i int) *PurchaseCreate {
	pc.mutation.SetPrice(i)
	return pc
}

// SetAmount sets the "amount" field.
func (pc *PurchaseCreate) SetAmount(i int) *PurchaseCreate {
	pc.mutation.SetAmount(i)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PurchaseCreate) SetCreatedAt(t time.Time) *PurchaseCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PurchaseCreate) SetNillableCreatedAt(t *time.Time) *PurchaseCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetBuyerID sets the "buyer" edge to the User entity by ID.
func (pc *PurchaseCreate) SetBuyerID(id int) *PurchaseCreate {
	pc.mutation.SetBuyerID(id)
	return pc
}

// SetBuyer sets the "buyer" edge to the User entity.
func (pc *PurchaseCreate) SetBuyer(u *User) *PurchaseCreate {
	return pc.SetBuyerID(u.ID)
}

// SetGroceryID sets the "grocery" edge to the Grocery entity by ID.
func (pc *PurchaseCreate) SetGroceryID(id int) *PurchaseCreate {
	pc.mutation.SetGroceryID(id)
	return pc
}

// SetGrocery sets the "grocery" edge to the Grocery entity.
func (pc *PurchaseCreate) SetGrocery(g *Grocery) *PurchaseCreate {
	return pc.SetGroceryID(g.ID)
}

// Mutation returns the PurchaseMutation object of the builder.
func (pc *PurchaseCreate) Mutation() *PurchaseMutation {
	return pc.mutation
}

// Save creates the Purchase in the database.
func (pc *PurchaseCreate) Save(ctx context.Context) (*Purchase, error) {
	pc.defaults()
	return withHooks[*Purchase, PurchaseMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PurchaseCreate) SaveX(ctx context.Context) *Purchase {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PurchaseCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PurchaseCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PurchaseCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := purchase.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PurchaseCreate) check() error {
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Purchase.price"`)}
	}
	if v, ok := pc.mutation.Price(); ok {
		if err := purchase.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Purchase.price": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Purchase.amount"`)}
	}
	if v, ok := pc.mutation.Amount(); ok {
		if err := purchase.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Purchase.amount": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Purchase.created_at"`)}
	}
	if _, ok := pc.mutation.BuyerID(); !ok {
		return &ValidationError{Name: "buyer", err: errors.New(`ent: missing required edge "Purchase.buyer"`)}
	}
	if _, ok := pc.mutation.GroceryID(); !ok {
		return &ValidationError{Name: "grocery", err: errors.New(`ent: missing required edge "Purchase.grocery"`)}
	}
	return nil
}

func (pc *PurchaseCreate) sqlSave(ctx context.Context) (*Purchase, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PurchaseCreate) createSpec() (*Purchase, *sqlgraph.CreateSpec) {
	var (
		_node = &Purchase{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(purchase.Table, sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(purchase.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.Amount(); ok {
		_spec.SetField(purchase.FieldAmount, field.TypeInt, value)
		_node.Amount = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(purchase.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pc.mutation.BuyerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.BuyerTable,
			Columns: []string{purchase.BuyerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_purchased = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.GroceryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.GroceryTable,
			Columns: []string{purchase.GroceryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.grocery_purchased = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PurchaseCreateBulk is the builder for creating many Purchase entities in bulk.
type PurchaseCreateBulk struct {
	config
	builders []*PurchaseCreate
}

// Save creates the Purchase entities in the database.
func (pcb *PurchaseCreateBulk) Save(ctx context.Context) ([]*Purchase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Purchase, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PurchaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PurchaseCreateBulk) SaveX(ctx context.Context) []*Purchase {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PurchaseCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PurchaseCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
