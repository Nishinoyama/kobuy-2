// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/nishinoyama/kobuy-2/pkg/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nishinoyama/kobuy-2/pkg/ent/grocery"
	"github.com/nishinoyama/kobuy-2/pkg/ent/ledger"
	"github.com/nishinoyama/kobuy-2/pkg/ent/purchase"
	"github.com/nishinoyama/kobuy-2/pkg/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Grocery is the client for interacting with the Grocery builders.
	Grocery *GroceryClient
	// Ledger is the client for interacting with the Ledger builders.
	Ledger *LedgerClient
	// Purchase is the client for interacting with the Purchase builders.
	Purchase *PurchaseClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Grocery = NewGroceryClient(c.config)
	c.Ledger = NewLedgerClient(c.config)
	c.Purchase = NewPurchaseClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Grocery:  NewGroceryClient(cfg),
		Ledger:   NewLedgerClient(cfg),
		Purchase: NewPurchaseClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Grocery:  NewGroceryClient(cfg),
		Ledger:   NewLedgerClient(cfg),
		Purchase: NewPurchaseClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Grocery.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Grocery.Use(hooks...)
	c.Ledger.Use(hooks...)
	c.Purchase.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Grocery.Intercept(interceptors...)
	c.Ledger.Intercept(interceptors...)
	c.Purchase.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GroceryMutation:
		return c.Grocery.mutate(ctx, m)
	case *LedgerMutation:
		return c.Ledger.mutate(ctx, m)
	case *PurchaseMutation:
		return c.Purchase.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GroceryClient is a client for the Grocery schema.
type GroceryClient struct {
	config
}

// NewGroceryClient returns a client for the Grocery from the given config.
func NewGroceryClient(c config) *GroceryClient {
	return &GroceryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grocery.Hooks(f(g(h())))`.
func (c *GroceryClient) Use(hooks ...Hook) {
	c.hooks.Grocery = append(c.hooks.Grocery, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `grocery.Intercept(f(g(h())))`.
func (c *GroceryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Grocery = append(c.inters.Grocery, interceptors...)
}

// Create returns a builder for creating a Grocery entity.
func (c *GroceryClient) Create() *GroceryCreate {
	mutation := newGroceryMutation(c.config, OpCreate)
	return &GroceryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Grocery entities.
func (c *GroceryClient) CreateBulk(builders ...*GroceryCreate) *GroceryCreateBulk {
	return &GroceryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Grocery.
func (c *GroceryClient) Update() *GroceryUpdate {
	mutation := newGroceryMutation(c.config, OpUpdate)
	return &GroceryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroceryClient) UpdateOne(gr *Grocery) *GroceryUpdateOne {
	mutation := newGroceryMutation(c.config, OpUpdateOne, withGrocery(gr))
	return &GroceryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroceryClient) UpdateOneID(id int) *GroceryUpdateOne {
	mutation := newGroceryMutation(c.config, OpUpdateOne, withGroceryID(id))
	return &GroceryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Grocery.
func (c *GroceryClient) Delete() *GroceryDelete {
	mutation := newGroceryMutation(c.config, OpDelete)
	return &GroceryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroceryClient) DeleteOne(gr *Grocery) *GroceryDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroceryClient) DeleteOneID(id int) *GroceryDeleteOne {
	builder := c.Delete().Where(grocery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroceryDeleteOne{builder}
}

// Query returns a query builder for Grocery.
func (c *GroceryClient) Query() *GroceryQuery {
	return &GroceryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGrocery},
		inters: c.Interceptors(),
	}
}

// Get returns a Grocery entity by its id.
func (c *GroceryClient) Get(ctx context.Context, id int) (*Grocery, error) {
	return c.Query().Where(grocery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroceryClient) GetX(ctx context.Context, id int) *Grocery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvider queries the provider edge of a Grocery.
func (c *GroceryClient) QueryProvider(gr *Grocery) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grocery.Table, grocery.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, grocery.ProviderTable, grocery.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPurchased queries the purchased edge of a Grocery.
func (c *GroceryClient) QueryPurchased(gr *Grocery) *PurchaseQuery {
	query := (&PurchaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grocery.Table, grocery.FieldID, id),
			sqlgraph.To(purchase.Table, purchase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, grocery.PurchasedTable, grocery.PurchasedColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroceryClient) Hooks() []Hook {
	return c.hooks.Grocery
}

// Interceptors returns the client interceptors.
func (c *GroceryClient) Interceptors() []Interceptor {
	return c.inters.Grocery
}

func (c *GroceryClient) mutate(ctx context.Context, m *GroceryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroceryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroceryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroceryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroceryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Grocery mutation op: %q", m.Op())
	}
}

// LedgerClient is a client for the Ledger schema.
type LedgerClient struct {
	config
}

// NewLedgerClient returns a client for the Ledger from the given config.
func NewLedgerClient(c config) *LedgerClient {
	return &LedgerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ledger.Hooks(f(g(h())))`.
func (c *LedgerClient) Use(hooks ...Hook) {
	c.hooks.Ledger = append(c.hooks.Ledger, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ledger.Intercept(f(g(h())))`.
func (c *LedgerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ledger = append(c.inters.Ledger, interceptors...)
}

// Create returns a builder for creating a Ledger entity.
func (c *LedgerClient) Create() *LedgerCreate {
	mutation := newLedgerMutation(c.config, OpCreate)
	return &LedgerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ledger entities.
func (c *LedgerClient) CreateBulk(builders ...*LedgerCreate) *LedgerCreateBulk {
	return &LedgerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ledger.
func (c *LedgerClient) Update() *LedgerUpdate {
	mutation := newLedgerMutation(c.config, OpUpdate)
	return &LedgerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LedgerClient) UpdateOne(l *Ledger) *LedgerUpdateOne {
	mutation := newLedgerMutation(c.config, OpUpdateOne, withLedger(l))
	return &LedgerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LedgerClient) UpdateOneID(id int) *LedgerUpdateOne {
	mutation := newLedgerMutation(c.config, OpUpdateOne, withLedgerID(id))
	return &LedgerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ledger.
func (c *LedgerClient) Delete() *LedgerDelete {
	mutation := newLedgerMutation(c.config, OpDelete)
	return &LedgerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LedgerClient) DeleteOne(l *Ledger) *LedgerDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LedgerClient) DeleteOneID(id int) *LedgerDeleteOne {
	builder := c.Delete().Where(ledger.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LedgerDeleteOne{builder}
}

// Query returns a query builder for Ledger.
func (c *LedgerClient) Query() *LedgerQuery {
	return &LedgerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLedger},
		inters: c.Interceptors(),
	}
}

// Get returns a Ledger entity by its id.
func (c *LedgerClient) Get(ctx context.Context, id int) (*Ledger, error) {
	return c.Query().Where(ledger.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LedgerClient) GetX(ctx context.Context, id int) *Ledger {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayer queries the payer edge of a Ledger.
func (c *LedgerClient) QueryPayer(l *Ledger) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ledger.Table, ledger.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ledger.PayerTable, ledger.PayerColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiver queries the receiver edge of a Ledger.
func (c *LedgerClient) QueryReceiver(l *Ledger) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ledger.Table, ledger.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ledger.ReceiverTable, ledger.ReceiverColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LedgerClient) Hooks() []Hook {
	return c.hooks.Ledger
}

// Interceptors returns the client interceptors.
func (c *LedgerClient) Interceptors() []Interceptor {
	return c.inters.Ledger
}

func (c *LedgerClient) mutate(ctx context.Context, m *LedgerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LedgerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LedgerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LedgerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LedgerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ledger mutation op: %q", m.Op())
	}
}

// PurchaseClient is a client for the Purchase schema.
type PurchaseClient struct {
	config
}

// NewPurchaseClient returns a client for the Purchase from the given config.
func NewPurchaseClient(c config) *PurchaseClient {
	return &PurchaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `purchase.Hooks(f(g(h())))`.
func (c *PurchaseClient) Use(hooks ...Hook) {
	c.hooks.Purchase = append(c.hooks.Purchase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `purchase.Intercept(f(g(h())))`.
func (c *PurchaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Purchase = append(c.inters.Purchase, interceptors...)
}

// Create returns a builder for creating a Purchase entity.
func (c *PurchaseClient) Create() *PurchaseCreate {
	mutation := newPurchaseMutation(c.config, OpCreate)
	return &PurchaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Purchase entities.
func (c *PurchaseClient) CreateBulk(builders ...*PurchaseCreate) *PurchaseCreateBulk {
	return &PurchaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Purchase.
func (c *PurchaseClient) Update() *PurchaseUpdate {
	mutation := newPurchaseMutation(c.config, OpUpdate)
	return &PurchaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PurchaseClient) UpdateOne(pu *Purchase) *PurchaseUpdateOne {
	mutation := newPurchaseMutation(c.config, OpUpdateOne, withPurchase(pu))
	return &PurchaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PurchaseClient) UpdateOneID(id int) *PurchaseUpdateOne {
	mutation := newPurchaseMutation(c.config, OpUpdateOne, withPurchaseID(id))
	return &PurchaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Purchase.
func (c *PurchaseClient) Delete() *PurchaseDelete {
	mutation := newPurchaseMutation(c.config, OpDelete)
	return &PurchaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PurchaseClient) DeleteOne(pu *Purchase) *PurchaseDeleteOne {
	return c.DeleteOneID(pu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PurchaseClient) DeleteOneID(id int) *PurchaseDeleteOne {
	builder := c.Delete().Where(purchase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PurchaseDeleteOne{builder}
}

// Query returns a query builder for Purchase.
func (c *PurchaseClient) Query() *PurchaseQuery {
	return &PurchaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePurchase},
		inters: c.Interceptors(),
	}
}

// Get returns a Purchase entity by its id.
func (c *PurchaseClient) Get(ctx context.Context, id int) (*Purchase, error) {
	return c.Query().Where(purchase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PurchaseClient) GetX(ctx context.Context, id int) *Purchase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBuyer queries the buyer edge of a Purchase.
func (c *PurchaseClient) QueryBuyer(pu *Purchase) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(purchase.Table, purchase.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, purchase.BuyerTable, purchase.BuyerColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrocery queries the grocery edge of a Purchase.
func (c *PurchaseClient) QueryGrocery(pu *Purchase) *GroceryQuery {
	query := (&GroceryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(purchase.Table, purchase.FieldID, id),
			sqlgraph.To(grocery.Table, grocery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, purchase.GroceryTable, purchase.GroceryColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PurchaseClient) Hooks() []Hook {
	return c.hooks.Purchase
}

// Interceptors returns the client interceptors.
func (c *PurchaseClient) Interceptors() []Interceptor {
	return c.inters.Purchase
}

func (c *PurchaseClient) mutate(ctx context.Context, m *PurchaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PurchaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PurchaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PurchaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PurchaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Purchase mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvidedGroceries queries the provided_groceries edge of a User.
func (c *UserClient) QueryProvidedGroceries(u *User) *GroceryQuery {
	query := (&GroceryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(grocery.Table, grocery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProvidedGroceriesTable, user.ProvidedGroceriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPurchased queries the purchased edge of a User.
func (c *UserClient) QueryPurchased(u *User) *PurchaseQuery {
	query := (&PurchaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(purchase.Table, purchase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PurchasedTable, user.PurchasedColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayer queries the payer edge of a User.
func (c *UserClient) QueryPayer(u *User) *LedgerQuery {
	query := (&LedgerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ledger.Table, ledger.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PayerTable, user.PayerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiver queries the receiver edge of a User.
func (c *UserClient) QueryReceiver(u *User) *LedgerQuery {
	query := (&LedgerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ledger.Table, ledger.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReceiverTable, user.ReceiverColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Grocery, Ledger, Purchase, User []ent.Hook
	}
	inters struct {
		Grocery, Ledger, Purchase, User []ent.Interceptor
	}
)
