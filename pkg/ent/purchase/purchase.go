// Code generated by ent, DO NOT EDIT.

package purchase

import (
	"time"
)

const (
	// Label holds the string label denoting the purchase type in the database.
	Label = "purchase"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBuyer holds the string denoting the buyer edge name in mutations.
	EdgeBuyer = "buyer"
	// EdgeGrocery holds the string denoting the grocery edge name in mutations.
	EdgeGrocery = "grocery"
	// Table holds the table name of the purchase in the database.
	Table = "purchases"
	// BuyerTable is the table that holds the buyer relation/edge.
	BuyerTable = "purchases"
	// BuyerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BuyerInverseTable = "users"
	// BuyerColumn is the table column denoting the buyer relation/edge.
	BuyerColumn = "user_purchased"
	// GroceryTable is the table that holds the grocery relation/edge.
	GroceryTable = "purchases"
	// GroceryInverseTable is the table name for the Grocery entity.
	// It exists in this package in order to avoid circular dependency with the "grocery" package.
	GroceryInverseTable = "groceries"
	// GroceryColumn is the table column denoting the grocery relation/edge.
	GroceryColumn = "grocery_purchased"
)

// Columns holds all SQL columns for purchase fields.
var Columns = []string{
	FieldID,
	FieldPrice,
	FieldAmount,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "purchases"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"grocery_purchased",
	"user_purchased",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(int) error
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)
