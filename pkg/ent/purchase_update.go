// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nishinoyama/kobuy-2/pkg/ent/grocery"
	"github.com/nishinoyama/kobuy-2/pkg/ent/predicate"
	"github.com/nishinoyama/kobuy-2/pkg/ent/purchase"
	"github.com/nishinoyama/kobuy-2/pkg/ent/user"
)

// PurchaseUpdate is the builder for updating Purchase entities.
type PurchaseUpdate struct {
	config
	hooks    []Hook
	mutation *PurchaseMutation
}

// Where appends a list predicates to the PurchaseUpdate builder.
func (pu *PurchaseUpdate) Where(ps ...predicate.Purchase) *PurchaseUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPrice sets the "price" field.
func (pu *PurchaseUpdate) SetPrice(i int) *PurchaseUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(i)
	return pu
}

// AddPrice adds i to the "price" field.
func (pu *PurchaseUpdate) AddPrice(i int) *PurchaseUpdate {
	pu.mutation.AddPrice(i)
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PurchaseUpdate) SetAmount(i int) *PurchaseUpdate {
	pu.mutation.ResetAmount()
	pu.mutation.SetAmount(i)
	return pu
}

// AddAmount adds i to the "amount" field.
func (pu *PurchaseUpdate) AddAmount(i int) *PurchaseUpdate {
	pu.mutation.AddAmount(i)
	return pu
}

// SetBuyerID sets the "buyer" edge to the User entity by ID.
func (pu *PurchaseUpdate) SetBuyerID(id int) *PurchaseUpdate {
	pu.mutation.SetBuyerID(id)
	return pu
}

// SetBuyer sets the "buyer" edge to the User entity.
func (pu *PurchaseUpdate) SetBuyer(u *User) *PurchaseUpdate {
	return pu.SetBuyerID(u.ID)
}

// SetGroceryID sets the "grocery" edge to the Grocery entity by ID.
func (pu *PurchaseUpdate) SetGroceryID(id int) *PurchaseUpdate {
	pu.mutation.SetGroceryID(id)
	return pu
}

// SetGrocery sets the "grocery" edge to the Grocery entity.
func (pu *PurchaseUpdate) SetGrocery(g *Grocery) *PurchaseUpdate {
	return pu.SetGroceryID(g.ID)
}

// Mutation returns the PurchaseMutation object of the builder.
func (pu *PurchaseUpdate) Mutation() *PurchaseMutation {
	return pu.mutation
}

// ClearBuyer clears the "buyer" edge to the User entity.
func (pu *PurchaseUpdate) ClearBuyer() *PurchaseUpdate {
	pu.mutation.ClearBuyer()
	return pu
}

// ClearGrocery clears the "grocery" edge to the Grocery entity.
func (pu *PurchaseUpdate) ClearGrocery() *PurchaseUpdate {
	pu.mutation.ClearGrocery()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PurchaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PurchaseMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PurchaseUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PurchaseUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PurchaseUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PurchaseUpdate) check() error {
	if v, ok := pu.mutation.Price(); ok {
		if err := purchase.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Purchase.price": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Amount(); ok {
		if err := purchase.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Purchase.amount": %w`, err)}
		}
	}
	if _, ok := pu.mutation.BuyerID(); pu.mutation.BuyerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Purchase.buyer"`)
	}
	if _, ok := pu.mutation.GroceryID(); pu.mutation.GroceryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Purchase.grocery"`)
	}
	return nil
}

func (pu *PurchaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(purchase.Table, purchase.Columns, sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(purchase.FieldPrice, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(purchase.FieldPrice, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.SetField(purchase.FieldAmount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAmount(); ok {
		_spec.AddField(purchase.FieldAmount, field.TypeInt, value)
	}
	if pu.mutation.BuyerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.BuyerTable,
			Columns: []string{purchase.BuyerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BuyerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.BuyerTable,
			Columns: []string{purchase.BuyerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.GroceryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.GroceryTable,
			Columns: []string{purchase.GroceryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GroceryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.GroceryTable,
			Columns: []string{purchase.GroceryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PurchaseUpdateOne is the builder for updating a single Purchase entity.
type PurchaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PurchaseMutation
}

// SetPrice sets the "price" field.
func (puo *PurchaseUpdateOne) SetPrice(i int) *PurchaseUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(i)
	return puo
}

// AddPrice adds i to the "price" field.
func (puo *PurchaseUpdateOne) AddPrice(i int) *PurchaseUpdateOne {
	puo.mutation.AddPrice(i)
	return puo
}

// SetAmount sets the "amount" field.
func (puo *PurchaseUpdateOne) SetAmount(i int) *PurchaseUpdateOne {
	puo.mutation.ResetAmount()
	puo.mutation.SetAmount(i)
	return puo
}

// AddAmount adds i to the "amount" field.
func (puo *PurchaseUpdateOne) AddAmount(i int) *PurchaseUpdateOne {
	puo.mutation.AddAmount(i)
	return puo
}

// SetBuyerID sets the "buyer" edge to the User entity by ID.
func (puo *PurchaseUpdateOne) SetBuyerID(id int) *PurchaseUpdateOne {
	puo.mutation.SetBuyerID(id)
	return puo
}

// SetBuyer sets the "buyer" edge to the User entity.
func (puo *PurchaseUpdateOne) SetBuyer(u *User) *PurchaseUpdateOne {
	return puo.SetBuyerID(u.ID)
}

// SetGroceryID sets the "grocery" edge to the Grocery entity by ID.
func (puo *PurchaseUpdateOne) SetGroceryID(id int) *PurchaseUpdateOne {
	puo.mutation.SetGroceryID(id)
	return puo
}

// SetGrocery sets the "grocery" edge to the Grocery entity.
func (puo *PurchaseUpdateOne) SetGrocery(g *Grocery) *PurchaseUpdateOne {
	return puo.SetGroceryID(g.ID)
}

// Mutation returns the PurchaseMutation object of the builder.
func (puo *PurchaseUpdateOne) Mutation() *PurchaseMutation {
	return puo.mutation
}

// ClearBuyer clears the "buyer" edge to the User entity.
func (puo *PurchaseUpdateOne) ClearBuyer() *PurchaseUpdateOne {
	puo.mutation.ClearBuyer()
	return puo
}

// ClearGrocery clears the "grocery" edge to the Grocery entity.
func (puo *PurchaseUpdateOne) ClearGrocery() *PurchaseUpdateOne {
	puo.mutation.ClearGrocery()
	return puo
}

// Where appends a list predicates to the PurchaseUpdate builder.
func (puo *PurchaseUpdateOne) Where(ps ...predicate.Purchase) *PurchaseUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PurchaseUpdateOne) Select(field string, fields ...string) *PurchaseUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Purchase entity.
func (puo *PurchaseUpdateOne) Save(ctx context.Context) (*Purchase, error) {
	return withHooks[*Purchase, PurchaseMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PurchaseUpdateOne) SaveX(ctx context.Context) *Purchase {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PurchaseUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PurchaseUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PurchaseUpdateOne) check() error {
	if v, ok := puo.mutation.Price(); ok {
		if err := purchase.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Purchase.price": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Amount(); ok {
		if err := purchase.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Purchase.amount": %w`, err)}
		}
	}
	if _, ok := puo.mutation.BuyerID(); puo.mutation.BuyerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Purchase.buyer"`)
	}
	if _, ok := puo.mutation.GroceryID(); puo.mutation.GroceryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Purchase.grocery"`)
	}
	return nil
}

func (puo *PurchaseUpdateOne) sqlSave(ctx context.Context) (_node *Purchase, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(purchase.Table, purchase.Columns, sqlgraph.NewFieldSpec(purchase.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Purchase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purchase.FieldID)
		for _, f := range fields {
			if !purchase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != purchase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(purchase.FieldPrice, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(purchase.FieldPrice, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.SetField(purchase.FieldAmount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAmount(); ok {
		_spec.AddField(purchase.FieldAmount, field.TypeInt, value)
	}
	if puo.mutation.BuyerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.BuyerTable,
			Columns: []string{purchase.BuyerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BuyerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.BuyerTable,
			Columns: []string{purchase.BuyerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.GroceryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.GroceryTable,
			Columns: []string{purchase.GroceryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GroceryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchase.GroceryTable,
			Columns: []string{purchase.GroceryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Purchase{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
