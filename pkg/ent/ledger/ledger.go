// Code generated by ent, DO NOT EDIT.

package ledger

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ledger type in the database.
	Label = "ledger"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgePayer holds the string denoting the payer edge name in mutations.
	EdgePayer = "payer"
	// EdgeReceiver holds the string denoting the receiver edge name in mutations.
	EdgeReceiver = "receiver"
	// Table holds the table name of the ledger in the database.
	Table = "ledgers"
	// PayerTable is the table that holds the payer relation/edge.
	PayerTable = "ledgers"
	// PayerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PayerInverseTable = "users"
	// PayerColumn is the table column denoting the payer relation/edge.
	PayerColumn = "user_payer"
	// ReceiverTable is the table that holds the receiver relation/edge.
	ReceiverTable = "ledgers"
	// ReceiverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReceiverInverseTable = "users"
	// ReceiverColumn is the table column denoting the receiver relation/edge.
	ReceiverColumn = "user_receiver"
)

// Columns holds all SQL columns for ledger fields.
var Columns = []string{
	FieldID,
	FieldPrice,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ledgers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_payer",
	"user_receiver",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePurchase Type = "purchase"
	TypeCash     Type = "cash"
	TypeEtc      Type = "etc"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePurchase, TypeCash, TypeEtc:
		return nil
	default:
		return fmt.Errorf("ledger: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Ledger queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPayerField orders the results by payer field.
func ByPayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPayerStep(), sql.OrderByField(field, opts...))
	}
}

// ByReceiverField orders the results by receiver field.
func ByReceiverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiverStep(), sql.OrderByField(field, opts...))
	}
}
func newPayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PayerTable, PayerColumn),
	)
}
func newReceiverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReceiverTable, ReceiverColumn),
	)
}
